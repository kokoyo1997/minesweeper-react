{"version":3,"sources":["constants.js","component/InfoWrapper.js","component/Square.js","component/Board.js","component/Setting.js","lib/minesweeper.js","component/Game.js","index.js"],"names":["GAMESTATE","CODES","OPENED","NOTHING","FLAG","QUESTION","MINE","MINE_FLAG","MINE_QUESTION","InfoWrapper","mines","leftMines","gameState","handleRestart","runtime","handleShowSet","status","state","transformStatus","runtimeStr","length","repeat","className","onClick","Square","code","handleLeftClick","handleRightClick","value","style","parseCode","onContextMenu","Board","boardData","rows","cols","Array","fill","map","row","i","col","j","e","Setting","show","handleSet","useState","width","height","attr","setAttr","handleWidthChange","target","name","num_value","parseInt","prev","Math","min","floor","type","id","max","onChange","initBoard","mineCount","candidates","v","shuffle","chosen","splice","random","push","rowData","x","expandOpenedCell","y","openedCellCount","dfsSearch","aroundCode","concat","filter","includes","getMineCount","aroundPoint","forEach","Game","gameAttr","setGameAttr","setBoardData","openedCount","setOpenedCount","setGameState","flagCount","setFlagCount","setMineCount","setRuntime","showSet","setShowSet","useEffect","open","console","log","timer","setInterval","clearInterval","cur_boardData","slice","r","preventDefault","getNextCellCode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6dc69fdf.chunk.js","sourcesContent":["// Game Settings\r\nexport const MIN_WIDTH = 9;\r\nexport const MAX_WIDTH = 20;\r\nexport const MIN_HEIGHT = 9;\r\nexport const MAX_HEIGHT = 20;\r\nexport const MIN_MINES = 10;\r\n\r\n// Design Settings\r\nexport const CELL_SIZE = 42;\r\nexport const CELL_MARGIN = 2;\r\n\r\n// Game States\r\nexport const GAMESTATE = {\r\n\tREADY: 'ready',\r\n\tRUN: 'run',\r\n\tWIN: 'win',\r\n\tLOSE: 'lose'\r\n};\r\n\r\n// Cell States\r\nexport const CODES = {\r\n\tOPENED: 0,\r\n\tNOTHING: -1,\r\n\tFLAG: -2,\r\n\tQUESTION: -3,\r\n\tMINE: -4,\r\n\tMINE_FLAG: -5,\r\n\tMINE_QUESTION: -6\r\n};","import { GAMESTATE } from \"../constants\";\r\n\r\nfunction InfoWrapper({mines,leftMines,gameState,handleRestart,runtime,handleShowSet}){\r\n  \r\n  const transformStatus=(state)=>{\r\n    switch(state){\r\n      case GAMESTATE.WIN: return \"😎\";\r\n      case GAMESTATE.LOSE: return \"😢\";\r\n      default: return \"😄\";\r\n    }\r\n  }\r\n\r\n  let status=transformStatus(gameState);\r\n  let runtimeStr=\"\"+runtime;\r\n  if(runtimeStr.length<3) runtimeStr=\"0\".repeat(3-runtimeStr.length)+runtimeStr;\r\n\r\n  return (\r\n      <div className=\"info\">\r\n        <div className=\"count\"><span>💣</span>{leftMines}/{mines}</div>\r\n        <div className=\"status\"><button onClick={handleRestart}>{status}</button><button onClick={handleShowSet}>⚙️</button></div>\r\n        <div className=\"time\"><span>🕙</span>{runtimeStr}</div>\r\n      </div>\r\n  );\r\n    \r\n}\r\nexport default InfoWrapper;","import { CODES, GAMESTATE } from \"../constants\";\r\n\r\nfunction Square({code,handleLeftClick,handleRightClick,state}){\r\n    const parseCode=(code)=>{\r\n        let value=\"\",style=\"square\";\r\n        switch(code){\r\n            case CODES.NOTHING:style+='';break;\r\n            case CODES.OPENED:style+=\" plain\";break;\r\n\r\n            case CODES.FLAG: value='🚩';style+=\" flag\";break;\r\n            case CODES.MINE_FLAG: \r\n                if(state===GAMESTATE.LOSE) value='💥';\r\n                else if(state===GAMESTATE.WIN) value='💣';\r\n                else {\r\n                    value='🚩';style+=\" flag\";\r\n                }\r\n                break;\r\n\r\n            case CODES.QUESTION: value='?';style+=\" question\";break;\r\n            case CODES.MINE_QUESTION: \r\n                if(state===GAMESTATE.LOSE) value='💥';\r\n                else if(state===GAMESTATE.WIN) value='💣';\r\n                else {\r\n                    value='?';\r\n                    style+=\" question\";\r\n                }\r\n                break;\r\n\r\n            case CODES.MINE:\r\n                switch(state){\r\n                    case GAMESTATE.LOSE: value='💥';break;\r\n                    case GAMESTATE.WIN: value='💣';break;\r\n                    default: value=\"\";\r\n                }\r\n                break;\r\n            default: value=code;style+=\" plain\";\r\n        }\r\n        return [value,style];\r\n    }\r\n\r\n    let [value,style]=parseCode(code);\r\n\r\n    return (\r\n        <button \r\n            className={style}\r\n            onClick={handleLeftClick}\r\n            onContextMenu={handleRightClick}\r\n        >{value}</button>\r\n    );\r\n}\r\nexport default Square;\r\n","import Square from './Square';\r\n\r\nfunction Board({boardData,handleLeftClick,handleRightClick,gameState}){\r\n    let rows=boardData.length,cols=boardData[0].length;\r\n    return (\r\n        <div className=\"board\">\r\n            {\r\n                Array(rows).fill(null).map((row,i)=>(\r\n                    <div className=\"board-row\" key={i}>\r\n                        {Array(cols).fill(null).map((col,j)=>(\r\n                            <Square \r\n                                key={j}\r\n                                code={boardData[i][j]}\r\n                                handleLeftClick={()=>handleLeftClick(i,j)}\r\n                                handleRightClick={(e)=>handleRightClick(e,i,j)}\r\n                                state={gameState}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                ))\r\n            }\r\n         \r\n        </div>\r\n    );\r\n}\r\nexport default Board;","import { useState } from \"react\";\r\nimport { MIN_HEIGHT, MIN_MINES, MIN_WIDTH, MAX_WIDTH, MAX_HEIGHT } from \"../constants\";\r\n\r\nfunction Setting({show,handleSet}){\r\n    const [attr,setAttr]=useState({\r\n        width:MIN_WIDTH,\r\n        height:MIN_HEIGHT,\r\n        mines:MIN_MINES\r\n    })\r\n\r\n    const handleWidthChange=({target})=>{\r\n        const {name,value}=target;\r\n        let num_value=parseInt(value);\r\n        setAttr((prev)=>({...prev,[name]:num_value}));\r\n        if(name!==\"mines\"){\r\n            setAttr((prev)=>({...prev,\"mines\":Math.min(attr.mines, Math.floor(attr.width*attr.height*0.8))}));\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n        {show&&<>\r\n            <div className=\"mask\"></div>\r\n            <div className=\"set-box\">\r\n            <h3>SETTING</h3>\r\n            <div className=\"set-bd\">\r\n                <label>Width: {attr.width}<br /> <input type=\"range\" name=\"width\" id=\"width\" min={MIN_WIDTH} max={MAX_WIDTH} onChange={(e)=>handleWidthChange(e)} value={attr.width}/></label>\r\n                <label>Height: {attr.height}<br /><input type=\"range\" name=\"height\" id=\"height\" min={MIN_HEIGHT} max={MAX_HEIGHT} onChange={(e)=>handleWidthChange(e)} value={attr.height}/></label>\r\n                <label>Mines: {attr.mines}<br /><input type=\"range\" name=\"mines\" id=\"mines\" min={MIN_MINES} max={Math.floor(attr.width*attr.height*0.8)} onChange={(e)=>handleWidthChange(e)} value={attr.mines}/></label>\r\n                <button onClick={()=>handleSet(attr)}>SET</button>\r\n            </div>\r\n            </div>\r\n        </>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Setting;","import { CODES } from '../constants';\r\n\r\n// ��ʼ������\r\nexport const initBoard = (width, height, mineCount) => {\r\n\tconst candidates = Array(width * height).fill().map((v, i) => i);\r\n\tconst shuffle = [];\r\n\tconst boardData = [];\r\n\r\n\twhile (candidates.length > width * height - mineCount) {\r\n\t\tconst chosen = candidates.splice(Math.floor(Math.random() * candidates.length), 1)[0];\r\n\t\tshuffle.push(chosen);\r\n\t}\r\n\r\n\tfor (let i = 0; i < height; i++) {\r\n\t\tconst rowData = Array(width).fill(CODES.NOTHING);\r\n\t\tboardData.push(rowData);\r\n\t}\r\n\r\n\tfor (let i = 0; i < shuffle.length; i++) {\r\n\t\tconst x = shuffle[i] % width;\r\n\t\tconst y = Math.floor(shuffle[i] / width);\r\n\t\tboardData[y][x] = CODES.MINE;\r\n\t}\r\n\r\n\treturn boardData;\r\n};\r\n\r\n// �������̵�ǰ״̬��ȡ����һ��״̬���Ҽ�ʱ��ʹ��\r\n// Ϊ�˲���ʧ�׵���Ϣ�����Է��˺ü���״̬\r\nexport const getNextCellCode = (code) => {\r\n\tswitch (code) {\r\n\t\tcase CODES.NOTHING: //û����\r\n\t\t\treturn CODES.FLAG; //�Ҽ�ʱ����Ϊƽ�ز���\r\n\t\tcase CODES.MINE://����������\r\n\t\t\treturn CODES.MINE_FLAG; //�Ҽ�����Ϊ�����ϲ���״̬\r\n\t\tcase CODES.FLAG://ƽ�ز���\r\n\t\t\treturn CODES.QUESTION;//���ƽ���ʺ�\r\n\t\tcase CODES.MINE_FLAG://���ϲ���\r\n\t\t\treturn CODES.MINE_QUESTION;//��������ʺ�\r\n\t\tcase CODES.QUESTION://ƽ���ʺ�\r\n\t\t\treturn CODES.NOTHING;//�ָ��ɳ�ʼû���׵�״̬\r\n\t\tcase CODES.MINE_QUESTION://�����ʺ�\r\n\t\t\treturn CODES.MINE;//�ָ�Ϊ��������\r\n\t\tdefault:\r\n\t\t\treturn code;\r\n\t}\r\n};\r\n\r\nexport const getFlagIncDec = (code) => {\r\n\tswitch (code) {\r\n\t\tcase CODES.NOTHING:\r\n\t\tcase CODES.MINE:\r\n\t\t\treturn 1;\r\n\t\tcase CODES.FLAG:\r\n\t\tcase CODES.MINE_FLAG:\r\n\t\t\treturn -1;\r\n\t\tdefault:\r\n\t\t\treturn 0;\r\n\t}\r\n};\r\n//��չ������Ϣ�����ʱ���ã�����Ŀǰ����״���͵���ĸ��ӣ�������״���Լ���չ�ĸ�������\r\nexport const expandOpenedCell = (boardData, x, y) => {\r\n\tlet openedCellCount = 0;\r\n\r\n\t// Define function to get mine count\r\n\tconst getMineCount = (x, y) => {\r\n\t\tlet aroundCode = [];\r\n\t\tlet mineCount = 0;\r\n\r\n\t\taroundCode = boardData[y - 1] ? aroundCode.concat(boardData[y - 1][x - 1], boardData[y - 1][x], boardData[y - 1][x + 1]) : aroundCode;\r\n\t\taroundCode = aroundCode.concat(boardData[y][x - 1], boardData[y][x + 1]);\r\n\t\taroundCode = boardData[y + 1] ? aroundCode.concat(boardData[y + 1][x - 1], boardData[y + 1][x], boardData[y + 1][x + 1]) : aroundCode;\r\n\r\n\t\tmineCount = aroundCode.filter(v => [\r\n\t\t\tCODES.MINE,\r\n\t\t\tCODES.MINE_FLAG,\r\n\t\t\tCODES.MINE_QUESTION\r\n\t\t].includes(v)).length;\r\n\r\n\t\treturn mineCount;\r\n\t};\r\n\r\n\t// Using DFS algorithm to expand\r\n\tconst dfsSearch = (x, y) => {\r\n\t\tif (boardData[y][x] !== CODES.NOTHING) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tboardData[y][x] = getMineCount(x, y);\r\n\t\topenedCellCount++;\r\n\r\n\t\tlet aroundPoint = [];\r\n\t\taroundPoint = boardData[y - 1] ? aroundPoint.concat({ x: x - 1, y: y - 1 }, { x, y: y - 1 }, { x: x + 1, y: y - 1 }) : aroundPoint;\r\n\t\taroundPoint = aroundPoint.concat({ x: x - 1, y }, { x: x + 1, y });\r\n\t\taroundPoint = boardData[y + 1] ? aroundPoint.concat({ x: x - 1, y: y + 1 }, { x, y: y + 1 }, { x: x + 1, y: y + 1 }) : aroundPoint;\r\n\r\n\t\tif (boardData[y][x] === 0) {\r\n\t\t\taroundPoint.forEach((v) => {\r\n\t\t\t\tdfsSearch(v.x, v.y);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tdfsSearch(x, y);\r\n\treturn { boardData, openedCellCount };\r\n};","import InfoWrapper from './InfoWrapper';\r\nimport Board from './Board';\r\nimport Setting from './Setting';\r\nimport { expandOpenedCell, getNextCellCode, initBoard } from '../lib/minesweeper';\r\nimport { CODES, GAMESTATE, MIN_HEIGHT, MIN_MINES, MIN_WIDTH } from '../constants';\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction Game(){\r\n    let [gameAttr,setGameAttr]=useState({\r\n        width:MIN_WIDTH,\r\n        height:MIN_HEIGHT,\r\n        mines:MIN_MINES\r\n    });\r\n    let [boardData,setBoardData]=useState(initBoard(MIN_WIDTH,MIN_HEIGHT,MIN_MINES));\r\n    let [openedCount,setOpenedCount]=useState(0);\r\n    let [gameState,setGameState]=useState(GAMESTATE.READY);\r\n    let [flagCount,setFlagCount]=useState(0);\r\n    let [mineCount,setMineCount]=useState(MIN_MINES);\r\n    let [runtime,setRuntime]=useState(0);\r\n    let [showSet,setShowSet]=useState(false);\r\n    \r\n    // �Ҽ�\r\n    const handleRightClick=(e,i,j)=>{\r\n        e.preventDefault();\r\n        if(gameState===GAMESTATE.WIN||gameState===GAMESTATE.LOSE) return;\r\n        if(gameState===GAMESTATE.READY) setGameState(GAMESTATE.RUN);\r\n        let cur_boardData=boardData.slice();\r\n        cur_boardData[i][j]=getNextCellCode(cur_boardData[i][j]);\r\n        // ���죬���������ӣ�open��������\r\n        if(cur_boardData[i][j]===CODES.MINE_FLAG||cur_boardData[i][j]===CODES.FLAG){\r\n            setFlagCount(prev=>prev+1);\r\n            // setOpenedCount(prev=>prev+1);\r\n            //�����ȷʵ�����׵ģ�mine��������\r\n            if(cur_boardData[i][j]===CODES.MINE_FLAG) setMineCount(prev=>prev-1);\r\n        }\r\n        // �����ʺţ�����������\r\n        else if(cur_boardData[i][j]===CODES.MINE_QUESTION||cur_boardData[i][j]===CODES.QUESTION){\r\n            setFlagCount(prev=>prev-1);\r\n            // setOpenedCount(prev=>prev-1);\r\n            //�����ȷʵ�����׵ģ�mine�����ָ�һ��\r\n            if(cur_boardData[i][j]===CODES.MINE_QUESTION) setMineCount(prev=>prev+1);\r\n        }\r\n        setBoardData(cur_boardData);\r\n    };\r\n    // ���\r\n    const handleLeftClick=(i,j)=>{\r\n        if(gameState===GAMESTATE.WIN||gameState===GAMESTATE.LOSE) return;\r\n        let cur_boardData=boardData.slice();\r\n        \r\n        if(gameState===GAMESTATE.READY) {\r\n            //�����һ�ε���͵㵽�ף���ô���³�ʼ������\r\n            while(cur_boardData[i][j]==CODES.MINE){\r\n                cur_boardData=initBoard(gameAttr.width,gameAttr.height,gameAttr.mines);\r\n            }\r\n            setGameState(GAMESTATE.RUN);\r\n        }\r\n        \r\n        if(cur_boardData[i][j]===CODES.MINE){\r\n            setGameState(GAMESTATE.LOSE);\r\n            return;\r\n        }\r\n        let r=expandOpenedCell(cur_boardData,j,i);\r\n        setOpenedCount(prev=>prev+r.openedCellCount);\r\n        setBoardData(cur_boardData);\r\n    };\r\n    // ����\r\n    const handleRestart=()=>{\r\n        setBoardData(initBoard(gameAttr.width,gameAttr.height,gameAttr.mines));\r\n        setOpenedCount(0);\r\n        setGameState(GAMESTATE.READY);\r\n        setFlagCount(0);\r\n        setMineCount(gameAttr.mines);\r\n        setRuntime(0);\r\n    }\r\n\r\n    // ��ʾ�������\r\n    const handleShowSet=()=>{\r\n        setShowSet(true);\r\n    }\r\n    // ��������\r\n    const handleSet=(attr)=>{\r\n        setShowSet(false);\r\n        setGameAttr(attr);\r\n    }\r\n\r\n    //�ж��Ƿ��Ѿ�ȫ����ȷ\r\n    const isWin=(open,mine)=>{\r\n        if(mine===0&&open===gameAttr.width*gameAttr.height-gameAttr.mines){\r\n            setGameState(GAMESTATE.WIN);\r\n            console.log(\"WIN!\");\r\n        }\r\n    };\r\n\r\n    //���µĵ�������ͼ���Ƿ��Ѿ�����\r\n    useEffect(()=>{\r\n        isWin(openedCount,mineCount);\r\n    },[openedCount,mineCount])\r\n\r\n    //��Ϸ��ʱ\r\n    useEffect(()=>{\r\n        let timer=null;\r\n        if(gameState===GAMESTATE.RUN) \r\n            timer=setInterval(() => {\r\n                setRuntime(prev=>prev+1);\r\n            }, 1000);\r\n        else clearInterval(timer);\r\n\r\n        return ()=>{\r\n            clearInterval(timer);\r\n        }\r\n\r\n    },[gameState]);\r\n\r\n    //�������ø��Ӻ�������������\r\n    useEffect(()=>{\r\n        //��Ϸ�ؿ�\r\n        handleRestart();\r\n    },[gameAttr]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"box\">\r\n                <main>\r\n                    <h1>Minesweeper Game in React</h1>\r\n                    <InfoWrapper \r\n                        mines={gameAttr.mines}\r\n                        leftMines={gameAttr.mines-flagCount}\r\n                        gameState={gameState}\r\n                        handleRestart={handleRestart}\r\n                        runtime={runtime}\r\n                        handleShowSet={handleShowSet}\r\n                    />\r\n                    <Board\r\n                        boardData={boardData}\r\n                        handleLeftClick={handleLeftClick}\r\n                        handleRightClick={handleRightClick}\r\n                        gameState={gameState}\r\n                    />\r\n                </main>\r\n            </div>\r\n            <Setting \r\n                show={showSet}\r\n                handleSet={handleSet}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './component/Game';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}