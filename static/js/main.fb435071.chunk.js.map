{"version":3,"sources":["constants.js","component/InfoWrapper.js","component/Square.js","component/Board.js","lib/minesweeper.js","component/Game.js","index.js"],"names":["MIN_MINES","GAMESTATE","CODES","OPENED","NOTHING","FLAG","QUESTION","MINE","MINE_FLAG","MINE_QUESTION","InfoWrapper","mines","leftMines","gameState","handleRestart","runtime","status","state","transformStatus","runtimeStr","length","repeat","className","onClick","Square","code","handleLeftClick","handleRightClick","value","style","parseCode","onContextMenu","Board","boardData","Array","fill","map","row","i","col","j","e","initBoard","width","height","mineCount","candidates","v","shuffle","chosen","splice","Math","floor","random","push","rowData","x","expandOpenedCell","y","openedCellCount","dfsSearch","aroundCode","concat","filter","includes","getMineCount","aroundPoint","forEach","Game","useState","setBoardData","openedCount","setOpenedCount","setGameState","flagCount","setFlagCount","setMineCount","setRuntime","useEffect","open","MIN_WIDTH","console","log","timer","setInterval","prev","clearInterval","cur_boardData","slice","r","preventDefault","getNextCellCode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb435071.chunk.js","sourcesContent":["// Game Settings\r\nexport const MIN_WIDTH = 9;\r\nexport const MAX_WIDTH = 20;\r\nexport const MIN_HEIGHT = 9;\r\nexport const MAX_HEIGHT = 20;\r\nexport const MIN_MINES = 10;\r\n\r\n// Design Settings\r\nexport const CELL_SIZE = 42;\r\nexport const CELL_MARGIN = 2;\r\n\r\n// Game States\r\nexport const GAMESTATE = {\r\n\tREADY: 'ready',\r\n\tRUN: 'run',\r\n\tWIN: 'win',\r\n\tLOSE: 'lose'\r\n};\r\n\r\n// Cell States\r\nexport const CODES = {\r\n\tOPENED: 0,\r\n\tNOTHING: -1,\r\n\tFLAG: -2,\r\n\tQUESTION: -3,\r\n\tMINE: -4,\r\n\tMINE_FLAG: -5,\r\n\tMINE_QUESTION: -6\r\n};","import { GAMESTATE } from \"../constants\";\r\n\r\nfunction InfoWrapper({mines,leftMines,gameState,handleRestart,runtime}){\r\n  \r\n  const transformStatus=(state)=>{\r\n    switch(state){\r\n      case GAMESTATE.WIN: return \"😎\";\r\n      case GAMESTATE.LOSE: return \"😢\";\r\n      default: return \"😄\";\r\n    }\r\n  }\r\n\r\n  let status=transformStatus(gameState);\r\n  let runtimeStr=\"\"+runtime;\r\n  if(runtimeStr.length<3) runtimeStr=\"0\".repeat(3-runtimeStr.length)+runtimeStr;\r\n\r\n  return (\r\n      <div className=\"info\">\r\n        <div className=\"count\"><span>💣</span>{leftMines}/{mines}</div>\r\n        <div className=\"status\"><button onClick={handleRestart}>{status}</button><button>⚙️</button></div>\r\n        <div className=\"time\"><span>🕙</span>{runtimeStr}</div>\r\n      </div>\r\n  );\r\n    \r\n}\r\nexport default InfoWrapper;","import { CODES, GAMESTATE } from \"../constants\";\r\n\r\nfunction Square({code,handleLeftClick,handleRightClick,state}){\r\n    const parseCode=(code)=>{\r\n        let value=\"\",style=\"square\";\r\n        switch(code){\r\n            case CODES.NOTHING:style+='';break;\r\n            case CODES.OPENED:style+=\" plain\";break;\r\n\r\n            case CODES.FLAG: value='🚩';style+=\" flag\";break;\r\n            case CODES.MINE_FLAG: \r\n                if(state===GAMESTATE.LOSE) value='💥';\r\n                else if(state===GAMESTATE.WIN) value='💣';\r\n                else {\r\n                    value='🚩';style+=\" flag\";\r\n                }\r\n                break;\r\n\r\n            case CODES.QUESTION: value='?';style+=\" question\";break;\r\n            case CODES.MINE_QUESTION: \r\n                if(state===GAMESTATE.LOSE) value='💥';\r\n                else if(state===GAMESTATE.WIN) value='💣';\r\n                else {\r\n                    value='?';\r\n                    style+=\" question\";\r\n                }\r\n                break;\r\n\r\n            case CODES.MINE:\r\n                switch(state){\r\n                    case GAMESTATE.LOSE: value='💥';break;\r\n                    case GAMESTATE.WIN: value='💣';break;\r\n                    default: value=\"\";\r\n                }\r\n                break;\r\n            default: value=code;style+=\" plain\";\r\n        }\r\n        return [value,style];\r\n    }\r\n\r\n    let [value,style]=parseCode(code);\r\n\r\n    return (\r\n        <button \r\n            className={style}\r\n            onClick={handleLeftClick}\r\n            onContextMenu={handleRightClick}\r\n        >{value}</button>\r\n    );\r\n}\r\nexport default Square;\r\n","import Square from './Square';\r\nimport { MIN_HEIGHT, MIN_WIDTH } from '../constants';\r\n\r\nfunction Board({boardData,handleLeftClick,handleRightClick,gameState}){\r\n    return (\r\n        <div className=\"board\">\r\n            {\r\n                Array(MIN_HEIGHT).fill(null).map((row,i)=>(\r\n                    <div className=\"board-row\" key={i}>\r\n                        {Array(MIN_WIDTH).fill(null).map((col,j)=>(\r\n                            <Square \r\n                                key={j}\r\n                                code={boardData[i][j]}\r\n                                handleLeftClick={()=>handleLeftClick(i,j)}\r\n                                handleRightClick={(e)=>handleRightClick(e,i,j)}\r\n                                state={gameState}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                ))\r\n            }\r\n         \r\n        </div>\r\n    );\r\n}\r\nexport default Board;","import { CODES } from '../constants';\r\n\r\n// ��ʼ������\r\nexport const initBoard = (width, height, mineCount) => {\r\n\tconst candidates = Array(width * height).fill().map((v, i) => i);\r\n\tconst shuffle = [];\r\n\tconst boardData = [];\r\n\r\n\twhile (candidates.length > width * height - mineCount) {\r\n\t\tconst chosen = candidates.splice(Math.floor(Math.random() * candidates.length), 1)[0];\r\n\t\tshuffle.push(chosen);\r\n\t}\r\n\r\n\tfor (let i = 0; i < height; i++) {\r\n\t\tconst rowData = Array(width).fill(CODES.NOTHING);\r\n\t\tboardData.push(rowData);\r\n\t}\r\n\r\n\tfor (let i = 0; i < shuffle.length; i++) {\r\n\t\tconst x = shuffle[i] % width;\r\n\t\tconst y = Math.floor(shuffle[i] / width);\r\n\t\tboardData[y][x] = CODES.MINE;\r\n\t}\r\n\r\n\treturn boardData;\r\n};\r\n\r\n// �������̵�ǰ״̬��ȡ����һ��״̬���Ҽ�ʱ��ʹ��\r\n// Ϊ�˲���ʧ�׵���Ϣ�����Է��˺ü���״̬\r\nexport const getNextCellCode = (code) => {\r\n\tswitch (code) {\r\n\t\tcase CODES.NOTHING: //û����\r\n\t\t\treturn CODES.FLAG; //�Ҽ�ʱ����Ϊƽ�ز���\r\n\t\tcase CODES.MINE://����������\r\n\t\t\treturn CODES.MINE_FLAG; //�Ҽ�����Ϊ�����ϲ���״̬\r\n\t\tcase CODES.FLAG://ƽ�ز���\r\n\t\t\treturn CODES.QUESTION;//���ƽ���ʺ�\r\n\t\tcase CODES.MINE_FLAG://���ϲ���\r\n\t\t\treturn CODES.MINE_QUESTION;//��������ʺ�\r\n\t\tcase CODES.QUESTION://ƽ���ʺ�\r\n\t\t\treturn CODES.NOTHING;//�ָ��ɳ�ʼû���׵�״̬\r\n\t\tcase CODES.MINE_QUESTION://�����ʺ�\r\n\t\t\treturn CODES.MINE;//�ָ�Ϊ��������\r\n\t\tdefault:\r\n\t\t\treturn code;\r\n\t}\r\n};\r\n\r\nexport const getFlagIncDec = (code) => {\r\n\tswitch (code) {\r\n\t\tcase CODES.NOTHING:\r\n\t\tcase CODES.MINE:\r\n\t\t\treturn 1;\r\n\t\tcase CODES.FLAG:\r\n\t\tcase CODES.MINE_FLAG:\r\n\t\t\treturn -1;\r\n\t\tdefault:\r\n\t\t\treturn 0;\r\n\t}\r\n};\r\n//��չ������Ϣ�����ʱ���ã�����Ŀǰ����״���͵���ĸ��ӣ�������״���Լ���չ�ĸ�������\r\nexport const expandOpenedCell = (boardData, x, y) => {\r\n\tlet openedCellCount = 0;\r\n\r\n\t// Define function to get mine count\r\n\tconst getMineCount = (x, y) => {\r\n\t\tlet aroundCode = [];\r\n\t\tlet mineCount = 0;\r\n\r\n\t\taroundCode = boardData[y - 1] ? aroundCode.concat(boardData[y - 1][x - 1], boardData[y - 1][x], boardData[y - 1][x + 1]) : aroundCode;\r\n\t\taroundCode = aroundCode.concat(boardData[y][x - 1], boardData[y][x + 1]);\r\n\t\taroundCode = boardData[y + 1] ? aroundCode.concat(boardData[y + 1][x - 1], boardData[y + 1][x], boardData[y + 1][x + 1]) : aroundCode;\r\n\r\n\t\tmineCount = aroundCode.filter(v => [\r\n\t\t\tCODES.MINE,\r\n\t\t\tCODES.MINE_FLAG,\r\n\t\t\tCODES.MINE_QUESTION\r\n\t\t].includes(v)).length;\r\n\r\n\t\treturn mineCount;\r\n\t};\r\n\r\n\t// Using DFS algorithm to expand\r\n\tconst dfsSearch = (x, y) => {\r\n\t\tif (boardData[y][x] !== CODES.NOTHING) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tboardData[y][x] = getMineCount(x, y);\r\n\t\topenedCellCount++;\r\n\r\n\t\tlet aroundPoint = [];\r\n\t\taroundPoint = boardData[y - 1] ? aroundPoint.concat({ x: x - 1, y: y - 1 }, { x, y: y - 1 }, { x: x + 1, y: y - 1 }) : aroundPoint;\r\n\t\taroundPoint = aroundPoint.concat({ x: x - 1, y }, { x: x + 1, y });\r\n\t\taroundPoint = boardData[y + 1] ? aroundPoint.concat({ x: x - 1, y: y + 1 }, { x, y: y + 1 }, { x: x + 1, y: y + 1 }) : aroundPoint;\r\n\r\n\t\tif (boardData[y][x] === 0) {\r\n\t\t\taroundPoint.forEach((v) => {\r\n\t\t\t\tdfsSearch(v.x, v.y);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tdfsSearch(x, y);\r\n\treturn { boardData, openedCellCount };\r\n};","import InfoWrapper from './InfoWrapper';\r\nimport Board from './Board';\r\nimport { expandOpenedCell, getNextCellCode, initBoard } from '../lib/minesweeper';\r\nimport { CODES, GAMESTATE, MIN_HEIGHT, MIN_MINES, MIN_WIDTH } from '../constants';\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction Game(){\r\n    let [boardData,setBoardData]=useState(initBoard(MIN_WIDTH,MIN_HEIGHT,MIN_MINES));\r\n    let [openedCount,setOpenedCount]=useState(0);\r\n    let [gameState,setGameState]=useState(GAMESTATE.READY);\r\n    let [flagCount,setFlagCount]=useState(0);\r\n    let [mineCount,setMineCount]=useState(MIN_MINES);\r\n    let [runtime,setRuntime]=useState(0);\r\n    \r\n    // �Ҽ�\r\n    const handleRightClick=(e,i,j)=>{\r\n        e.preventDefault();\r\n        if(gameState===GAMESTATE.WIN||gameState===GAMESTATE.LOSE) return;\r\n        if(gameState===GAMESTATE.READY) setGameState(GAMESTATE.RUN);\r\n        let cur_boardData=boardData.slice();\r\n        cur_boardData[i][j]=getNextCellCode(cur_boardData[i][j]);\r\n        // ���죬���������ӣ�open��������\r\n        if(cur_boardData[i][j]===CODES.MINE_FLAG||cur_boardData[i][j]===CODES.FLAG){\r\n            setFlagCount(prev=>prev+1);\r\n            // setOpenedCount(prev=>prev+1);\r\n            //�����ȷʵ�����׵ģ�mine��������\r\n            if(cur_boardData[i][j]===CODES.MINE_FLAG) setMineCount(prev=>prev-1);\r\n        }\r\n        // �����ʺţ�����������\r\n        else if(cur_boardData[i][j]===CODES.MINE_QUESTION||cur_boardData[i][j]===CODES.QUESTION){\r\n            setFlagCount(prev=>prev-1);\r\n            // setOpenedCount(prev=>prev-1);\r\n            //�����ȷʵ�����׵ģ�mine�����ָ�һ��\r\n            if(cur_boardData[i][j]===CODES.MINE_QUESTION) setMineCount(prev=>prev+1);\r\n        }\r\n           \r\n        //�ָ��հף�open��������\r\n        // else{\r\n        //     setOpenedCount(prev=>prev-1);\r\n        // }\r\n        setBoardData(cur_boardData);\r\n    };\r\n    // ���\r\n    const handleLeftClick=(i,j)=>{\r\n        if(gameState===GAMESTATE.WIN||gameState===GAMESTATE.LOSE) return;\r\n        if(gameState===GAMESTATE.READY) setGameState(GAMESTATE.RUN);\r\n        let cur_boardData=boardData.slice();\r\n        if(cur_boardData[i][j]===CODES.MINE){\r\n            setGameState(GAMESTATE.LOSE);\r\n            return;\r\n        }\r\n        let r=expandOpenedCell(cur_boardData,j,i);\r\n        setOpenedCount(prev=>prev+r.openedCellCount);\r\n        setBoardData(cur_boardData);\r\n    };\r\n    // ����\r\n    const handleRestart=()=>{\r\n        setBoardData(initBoard(MIN_WIDTH,MIN_HEIGHT,MIN_MINES));\r\n        setOpenedCount(0);\r\n        setGameState(GAMESTATE.READY);\r\n        setFlagCount(0);\r\n        setMineCount(MIN_MINES);\r\n        setRuntime(0);\r\n    }\r\n\r\n    //�ж��Ƿ��Ѿ�ȫ����ȷ\r\n    const isWin=(open,mine)=>{\r\n        if(mine===0&&open===MIN_WIDTH*MIN_HEIGHT-MIN_MINES){\r\n            setGameState(GAMESTATE.WIN);\r\n            console.log(\"WIN!\");\r\n        }\r\n    };\r\n    useEffect(()=>{\r\n        isWin(openedCount,mineCount);\r\n    },[openedCount,mineCount])\r\n\r\n    useEffect(()=>{\r\n        let timer=null;\r\n        if(gameState===GAMESTATE.RUN) \r\n            timer=setInterval(() => {\r\n                setRuntime(prev=>prev+1);\r\n            }, 1000);\r\n        else clearInterval(timer);\r\n\r\n        return ()=>{\r\n            clearInterval(timer);\r\n        }\r\n\r\n    },[gameState]);\r\n\r\n    return (\r\n        <div className=\"box\">\r\n            <main>\r\n                <h1>Minesweeper Game in React</h1>\r\n                <InfoWrapper \r\n                    mines={MIN_MINES}\r\n                    leftMines={MIN_MINES-flagCount}\r\n                    gameState={gameState}\r\n                    handleRestart={handleRestart}\r\n                    runtime={runtime}\r\n                />\r\n                <Board\r\n                    boardData={boardData}\r\n                    handleLeftClick={handleLeftClick}\r\n                    handleRightClick={handleRightClick}\r\n                    gameState={gameState}\r\n                />\r\n             </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './component/Game';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}